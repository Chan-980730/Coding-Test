1. -- 두 수의 차 -- !

문제 설명
정수 num1과 num2가 주어질 때, num1에서 num2를 뺀 값을 return하도록 soltuion 함수를 완성해주세요.

제한사항
-50000 ≤ num1 ≤ 50000
-50000 ≤ num2 ≤ 50000
입출력 예
num1	num2	result
2	3	-1
100	2	98
입출력 예 설명
입출력 예 #1

num1이 2이고 num2가 3이므로 2 - 3 = -1을 return합니다.
입출력 예 #2

num1이 100이고 num2가 2이므로 100 - 2 = 98을 return합니다.

- 풀이 -

def solution(num1, num2):
    answer = num1 - num2;
    return answer

2. -- 숫자 비교하기 -- ?

문제 설명
정수 num1과 num2가 매개변수로 주어집니다. 두 수가 같으면 1 다르면 -1을 retrun하도록 solution 함수를 완성해주세요.

제한사항
0 ≤ num1 ≤ 10,000
0 ≤ num2 ≤ 10,000
입출력 예
num1	num2	result
2	3	-1
11	11	1
7	99	-1
입출력 예 설명
입출력 예 설명 #1

num1이 2이고 num2가 3이므로 다릅니다. 따라서 -1을 return합니다.
입출력 예 설명 #2

num1이 11이고 num2가 11이므로 같습니다. 따라서 1을 return합니다.
입출력 예 설명 #3

num1이 7이고 num2가 99이므로 다릅니다. 따라서 -1을 return합니다.

- 풀이 -

def solution(num1, num2):                  -> solution이라는 이름의 함수를 정의 / 매개변수로 num1, num2를 받음
    answer = 1 if num1 ==num2 else -1;     -> 값1 if 조건 else 값2 : 조건이 참이면 값1, 거짓이면 값2
    return answer

if num1 == num2:
    answer = 1
else:
    answer = -1 로 나타낼 수도 있음

3. -- 나이 출력 -- !

문제 설명
머쓱이는 선생님이 몇 년도에 태어났는지 궁금해졌습니다. 2022년 기준 선생님의 나이 age가 주어질 때, 선생님의 출생 연도를 return 하는 solution 함수를 완성해주세요

제한사항
0 < age ≤ 120
나이는 태어난 연도에 1살이며 매년 1월 1일마다 1살씩 증가합니다.
입출력 예
age	result
40	1983
23	2000
입출력 예 설명
입출력 예 #1

2022년 기준 40살이므로 1983년생입니다.
입출력 예 #2

2022년 기준 23살이므로 2000년생입니다.

- 풀이 -

def solution(age):
    answer = 2023-age;     -> 기준년도가 2022년이기 때문에 태어날 때부터 1살인 점을 감안해서 answer = 2022 - age + 1이 좀 더 명확함
    return answer


4. -- 나머지 구하기 -- !

문제 설명
정수 num1, num2가 매개변수로 주어질 때, num1를 num2로 나눈 나머지를 return 하도록 solution 함수를 완성해주세요.

제한사항
0 < num1 ≤ 100
0 < num2 ≤ 100
입출력 예
num1	num2	result
3	2	1
10	5	0
입출력 예 설명
입출력 예 #1

num1이 3, num2가 2이므로 3을 2로 나눈 나머지 1을 return 합니다.
입출력 예 #2

num1이 10, num2가 5이므로 10을 5로 나눈 나머지 0을 return 합니다.

- 풀이 -

def solution(num1, num2):     
    answer = num1%num2;       -> num1이 num2보다 작더라도 큰 수로 작을 수를 나눌 수 없기 때문에 num1 자체가 나머지가 됨
    return answer

5. -- 몫 구하기 -- ?

문제 설명
정수 num1, num2가 매개변수로 주어질 때, num1을 num2로 나눈 몫을 return 하도록 solution 함수를 완성해주세요.

제한사항
0 < num1 ≤ 100
0 < num2 ≤ 100
입출력 예
num1	num2	result
10	5	2
7	2	3
입출력 예 설명
입출력 예 #1

num1이 10, num2가 5이므로 10을 5로 나눈 몫 2를 return 합니다.
입출력 예 #2

num1이 7, num2가 2이므로 7을 2로 나눈 몫 3을 return 합니다.

- 풀이 - 

def solution(num1, num2):
    answer = num1//num2;      -> //는 몫만 구하는 연산자
    return answer

6. -- 두 수의 곱 -- !

문제 설명
정수 num1, num2가 매개변수 주어집니다. num1과 num2를 곱한 값을 return 하도록 solution 함수를 완성해주세요.

제한사항
0 ≤ num1 ≤ 100
0 ≤ num2 ≤ 100
입출력 예
num1	num2	result
3	4	12
27	19	513
입출력 예 설명
입출력 예 #1

num1이 3, num2가 4이므로 3 * 4 = 12를 return합니다.
입출력 예 #2

num1이 27, num2가 19이므로 27 * 19 = 513을 return합니다.

- 풀이 - 

def solution(num1, num2):
    answer = num1 * num2;
    return answer

7. -- 두 수의 합 -- !

문제 설명
정수 num1과 num2가 주어질 때, num1과 num2의 합을 return하도록 soltuion 함수를 완성해주세요.

제한사항
-50,000 ≤ num1 ≤ 50,000
-50,000 ≤ num2 ≤ 50,000
입출력 예
num1	num2	result
2	3	5
100	2	102
입출력 예 설명
입출력 예 #1

num1이 2이고 num2가 3이므로 2 + 3 = 5를 return합니다.
입출력 예 #2

num1이 100이고 num2가 2이므로 100 + 2 = 102를 return합니다.

- 풀이 - 

def solution(num1, num2):
    answer = num1 + num2;
    return answer


8. -- 두 수의 나눗셈 -- ?

문제 설명
정수 num1과 num2가 매개변수로 주어질 때, num1을 num2로 나눈 값에 1,000을 곱한 후 정수 부분을 return 하도록 soltuion 함수를 완성해주세요.

제한사항
0 < num1 ≤ 100
0 < num2 ≤ 100
입출력 예
num1	num2	result
3	2	1500
7	3	2333
1	16	62
입출력 예 설명
입출력 예 #1

num1이 3, num2가 2이므로 3 / 2 = 1.5에 1,000을 곱하면 1500이 됩니다.
입출력 예 #2

num1이 7, num2가 3이므로 7 / 3 = 2.33333...에 1,000을 곱하면 2333.3333.... 이 되며, 정수 부분은 2333입니다.
입출력 예 #3

num1이 1, num2가 16이므로 1 / 16 = 0.0625에 1,000을 곱하면 62.5가 되며, 정수 부분은 62입니다.

- 풀이 - 

def solution(num1, num2):
    answer = num1/num2 * 1000;     
    return int(answer)             -> 형변환을 할 때 앞에 형변환 함수를 쓰고 뒤에 ( )


9. -- 각도기 -- ?

문제 설명
각에서 0도 초과 90도 미만은 예각, 90도는 직각, 90도 초과 180도 미만은 둔각 180도는 평각으로 분류합니다. 각 angle이 매개변수로 주어질 때 예각일 때 1, 직각일 때 2, 둔각일 때 3, 평각일 때 4를 return하도록 solution 함수를 완성해주세요.

예각 : 0 < angle < 90
직각 : angle = 90
둔각 : 90 < angle < 180
평각 : angle = 180
제한사항
0 < angle ≤ 180
angle은 정수입니다.
입출력 예
angle	result
70	1
91	3
180	4
입출력 예 설명
입출력 예 #1

angle이 70이므로 예각입니다. 따라서 1을 return합니다.
입출력 예 #2

angle이 91이므로 둔각입니다. 따라서 3을 return합니다.
입출력 예 #2

angle이 180이므로 평각입니다. 따라서 4를 return합니다.

- 풀이 -

def solution(angle):
    answer = 0;
    if 0<angle<90:
        answer = 1
    elif angle == 90:      -> elif : else if의 줄임말 / 조건문에서 여러 개의 조건을 검사할 때 사용
        answer = 2
    elif 90<angle<180:     
        answer = 3
    elif angle == 180:     -> answer = 1 if 0 < angle < 90 else 2 if angle == 90 else 3 if 90 < angle < 180 else 4 로도 사용 가능
        answer = 4;
    return answer


10. -- 짝수의 합 -- ?

문제 설명
정수 n이 주어질 때, n이하의 짝수를 모두 더한 값을 return 하도록 solution 함수를 작성해주세요.

제한사항
0 < n ≤ 1000

입출력 예
n	result
10	30
4	6
입출력 예 설명
입출력 예 #1

n이 10이므로 2 + 4 + 6 + 8 + 10 = 30을 return 합니다.
입출력 예 #2

n이 4이므로 2 + 4 = 6을 return 합니다.

- 풀이 -

def solution(n):
    answer = 0
    for i in range(2, n+1, 2):     -> for문 : for i in range(시작값, 끝값, 증가값): / 시작값 <= i < 끝
        answer += i
    return answer

파이썬에서는 문장마다 ;(세미콜론)을 사용하지 않고 줄만 바꿔도 됨


11. -- 배열의 평균값 -- ?

문제 설명
정수 배열 numbers가 매개변수로 주어집니다. numbers의 원소의 평균값을 return하도록 solution 함수를 완성해주세요.

제한사항
0 ≤ numbers의 원소 ≤ 1,000
1 ≤ numbers의 길이 ≤ 100
정답의 소수 부분이 .0 또는 .5인 경우만 입력으로 주어집니다.
입출력 예
numbers	result
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]	5.5
[89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]	94.0
입출력 예 설명
입출력 예 #1

numbers의 원소들의 평균 값은 5.5입니다.
입출력 예 #2

numbers의 원소들의 평균 값은 94.0입니다.

- 풀이 -

def solution(numbers):
    answer = sum(numbers) / len(numbers)     -> sum(배열), len(배열)을 해도 바로 배열의 값들이 출력됨 (파이썬 내장함수)
    return answer

파이썬에서는 배열을 별로도 반복문을 사용해 원소로 나누거나 하지 않아도 됨


12. -- 배열 뒤집기 -- ?

문제 설명
정수가 들어 있는 배열 num_list가 매개변수로 주어집니다. num_list의 원소의 순서를 거꾸로 뒤집은 배열을 return하도록 solution 함수를 완성해주세요.

제한사항
1 ≤ num_list의 길이 ≤ 1,000
0 ≤ num_list의 원소 ≤ 1,000
입출력 예
num_list	result
[1, 2, 3, 4, 5]	[5, 4, 3, 2, 1]
[1, 1, 1, 1, 1, 2]	[2, 1, 1, 1, 1, 1]
[1, 0, 1, 1, 1, 3, 5]	[5, 3, 1, 1, 1, 0, 1]
입출력 예 설명
입출력 예 #1

num_list가 [1, 2, 3, 4, 5]이므로 순서를 거꾸로 뒤집은 배열 [5, 4, 3, 2, 1]을 return합니다.
입출력 예 #2

num_list가 [1, 1, 1, 1, 1, 2]이므로 순서를 거꾸로 뒤집은 배열 [2, 1, 1, 1, 1, 1]을 return합니다.
입출력 예 #3

num_list가 [1, 0, 1, 1, 1, 3, 5]이므로 순서를 거꾸로 뒤집은 배열 [5, 3, 1, 1, 1, 0, 1]을 return합니다.

- 풀이 - 

def solution(num_list):
    answer = num_list[::-1]     -> 역순 슬라이싱 : 순서를 뒤집음
    return answer

answer = [] -> 결과를 저장할 빈 리스트 answer를 생성
for i in range(len(num_list)-1, -1, -1): -> len(num_list) : num_list의 길이 반환 / 두번째 -1 : 반복의 종료 조건 (반복이 0까지 실행되고 -1에서 종료) / 세번째 -1 : 스텝 (1씩 감소)
len(num_list) -1 -> 리스트의 마지막 인덱스를 계산 (리스트의 인덱스는 0부터 시작이므로 마지막 인덱스는 길이에서 1을 뺀 값)
answer.append(num_list[i]) -> answer 리스트에 num_list[i] 값을 추가


13. -- 양꼬치 -- !

문제 설명
머쓱이네 양꼬치 가게는 10인분을 먹으면 음료수 하나를 서비스로 줍니다. 양꼬치는 1인분에 12,000원, 음료수는 2,000원입니다. 정수 n과 k가 매개변수로 주어졌을 때, 양꼬치 n인분과 음료수 k개를 먹었다면 총얼마를 지불해야 하는지 return 하도록 solution 함수를 완성해보세요.

제한사항
0 < n < 1,000
n / 10 ≤ k < 1,000
서비스로 받은 음료수는 모두 마십니다.
입출력 예
n	k	result
10	3	124,000
64	6	768,000
입출력 예 설명
입출력 예 #1

10인분을 시켜 서비스로 음료수를 하나 받아 총 10 * 12000 + 3 * 2000 - 1 * 2000 = 124,000원입니다.
입출력 예 #2

64인분을 시켜 서비스로 음료수를 6개 받아 총 64 * 12000 + 6 * 2000 - 6 * 2000 =768,000원입니다.

- 풀이 - 

def solution(n, k):
    answer = 12000*n + 2000*k - 2000*(n//10)
    return answer

def solution(n, k):
    # 양꼬치 가격 계산
    total_meat_price = 12000 * n
    # 음료수 가격 계산
    total_drink_price = 2000 * k
    # 무료 음료수 가격 계산
    free_drink_price = 2000 * (n // 10)
    # 최종 금액 계산
    answer = total_meat_price + total_drink_price - free_drink_price
    return answer


14. -- 세균 증식 -- !

문제 설명
어떤 세균은 1시간에 두배만큼 증식한다고 합니다. 처음 세균의 마리수 n과 경과한 시간 t가 매개변수로 주어질 때 t시간 후 세균의 수를 return하도록 solution 함수를 완성해주세요.

제한사항
1 ≤ n ≤ 10
1 ≤ t ≤ 15
입출력 예
n	t	result
2	10	2048
7	15	229,376
입출력 예 설명
입출력 예 #1

처음엔 2마리, 1시간 후엔 4마리, 2시간 후엔 8마리, ..., 10시간 후엔 2048마리가 됩니다. 따라서 2048을 return합니다.
입출력 예 #2

처음엔 7마리, 1시간 후엔 14마리, 2시간 후엔 28마리, ..., 15시간 후엔 229376마리가 됩니다. 따라서 229,376을 return합니다.

- 풀이 -

def solution(n, t):
    answer = n * (2**t)     -> ** : ^대신 사용 (승)
    return answer


15. -- 편지 -- !

문제 설명
머쓱이는 할머니께 생신 축하 편지를 쓰려고 합니다. 할머니가 보시기 편하도록 글자 한 자 한 자를 가로 2cm 크기로 적으려고 하며, 편지를 가로로만 적을 때, 축하 문구 message를 적기 위해 필요한 편지지의 최소 가로길이를 return 하도록 solution 함수를 완성해주세요.

제한사항
공백도 하나의 문자로 취급합니다.
1 ≤ message의 길이 ≤ 50
편지지의 여백은 생각하지 않습니다.
message는 영문 알파벳 대소문자, ‘!’, ‘~’ 또는 공백으로만 이루어져 있습니다.
입출력 예
message	result
"happy birthday!"	30
"I love you~"	22
입출력 예 설명
입출력 예 #1

message의 글자 수가 15개로 최소 가로 30cm의 편지지가 필요합니다.
입출력 예 #2

message의 글자 수가 11개로 최소 가로 22cm의 편지지가 필요합니다.

- 풀이 -

def solution(message):
    answer = len(message) * 2
    return answer


16. -- 배열 원소의 길이 -- ?

문제 설명
문자열 배열 strlist가 매개변수로 주어집니다. strlist 각 원소의 길이를 담은 배열을 return하도록 solution 함수를 완성해주세요.

제한사항
1 ≤ strlist 원소의 길이 ≤ 100
strlist는 알파벳 소문자, 대문자, 특수문자로 구성되어 있습니다.
입출력 예
strlist	result
["We", "are", "the", "world!"]	[2, 3, 3, 6]
["I", "Love", "Programmers."]	[1, 4, 12]
입출력 예 설명
입출력 예 #1

["We", "are", "the", "world!"]의 각 원소의 길이인 [2, 3, 3, 6]을 return합니다.
입출력 예 #2

["I", "Love", "Programmers."]의 각 원소의 길이인 [1, 4, 12]을 return합니다.

- 풀이 -

def solution(strlist):
    answer = [len(s) for s in strlist]     -> len(s) : 리스트가 아닌 개별 문자열에 작동
    return answer


17. -- 문자열 뒤집기 -- ?

문제 설명
문자열 my_string이 매개변수로 주어집니다. my_string을 거꾸로 뒤집은 문자열을 return하도록 solution 함수를 완성해주세요.

제한사항
1 ≤ my_string의 길이 ≤ 1,000
입출력 예
my_string	return
"jaron"	"noraj"
"bread"	"daerb"
입출력 예 설명
입출력 예 #1

my_string이 "jaron"이므로 거꾸로 뒤집은 "noraj"를 return합니다.
입출력 예 #2

my_string이 "bread"이므로 거꾸로 뒤집은 "daerb"를 return합니다.

- 풀이 -

def solution(my_string):
    answer = my_string[::-1]
    return answer


18. -- 특정 문자 제거하기 -- ?

문제 설명
문자열 my_string과 문자 letter이 매개변수로 주어집니다. my_string에서 letter를 제거한 문자열을 return하도록 solution 함수를 완성해주세요.

제한사항
1 ≤ my_string의 길이 ≤ 100
letter은 길이가 1인 영문자입니다.
my_string과 letter은 알파벳 대소문자로 이루어져 있습니다.
대문자와 소문자를 구분합니다.
입출력 예
my_string	letter	result
"abcdef"	"f"	"abcde"
"BCBdbe"	"B"	"Cdbe"
입출력 예 설명
입출력 예 #1

"abcdef" 에서 "f"를 제거한 "abcde"를 return합니다.
입출력 예 #2

"BCBdbe" 에서 "B"를 모두 제거한 "Cdbe"를 return합니다.

- 풀이 - 

def solution(my_string, letter):
    answer = my_string.replace(letter, "")
    return answer

19. -- 배열 자르기 -- ?

문제 설명
정수 배열 numbers와 정수 num1, num2가 매개변수로 주어질 때, numbers의 num1번 째 인덱스부터 num2번째 인덱스까지 자른 정수 배열을 return 하도록 solution 함수를 완성해보세요.

제한사항
2 ≤ numbers의 길이 ≤ 30
0 ≤ numbers의 원소 ≤ 1,000
0 ≤num1 < num2 < numbers의 길이
입출력 예
numbers	num1	num2	result
[1, 2, 3, 4, 5]	1	3	[2, 3, 4]
[1, 3, 5]	1	2	[3, 5]
입출력 예 설명
입출력 예 #1

[1, 2, 3, 4, 5]의 1번째 인덱스 2부터 3번째 인덱스 4 까지 자른 [2, 3, 4]를 return 합니다.
입출력 예 #2

[1, 3, 5]의 1번째 인덱스 3부터 2번째 인덱스 5까지 자른 [3, 5]를 return 합니다.

- 풀이 - 

def solution(numbers, num1, num2):
    answer = numbers[num1 : num2+1]
    return answer


20. -- 공배수 -- 

문제 설명
정수 number와 n, m이 주어집니다. number가 n의 배수이면서 m의 배수이면 1을 아니라면 0을 return하도록 solution 함수를 완성해주세요.

제한사항
10 ≤ number ≤ 100
2 ≤ n, m < 10
입출력 예
number	n	m	result
60	2	3	1
55	10	5	0
입출력 예 설명
입출력 예 #1

60은 2의 배수이면서 3의 배수이기 때문에 1을 return합니다.
입출력 예 #2

55는 5의 배수이지만 10의 배수가 아니기 때문에 0을 return합니다.

- 풀이 - 

def solution(number, n, m):
    answer = 0
    if number % n == 0 and number % m == 0:
        answer = 1
    return answer


21. -- 자릿수 더하기 --

문제 설명
정수 n이 매개변수로 주어질 때 n의 각 자리 숫자의 합을 return하도록 solution 함수를 완성해주세요

제한사항
0 ≤ n ≤ 1,000,000
입출력 예
n	result
1234	10
930211	16
입출력 예 설명
입출력 예 #1

1 + 2 + 3 + 4 = 10을 return합니다.
입출력 예 #2

9 + 3 + 0 + 2 + 1 + 1 = 16을 return합니다.

- 풀이 -

def solution(n):
    answer = 0
    while n > 0:
        answer += n % 10
        n //= 10
    return answer

22. --
