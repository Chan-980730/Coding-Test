-- 약수의 합 --

문제 설명
정수 n을 입력받아 n의 약수를 모두 더한 값을 리턴하는 함수, solution을 완성해주세요.

제한 사항
n은 0 이상 3000이하인 정수입니다.
입출력 예
n	return
12	28
5	6
입출력 예 설명
입출력 예 #1
12의 약수는 1, 2, 3, 4, 6, 12입니다. 이를 모두 더하면 28입니다.

입출력 예 #2
5의 약수는 1, 5입니다. 이를 모두 더하면 6입니다.

- 풀이 -

#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

int solution(int n) {     -> 약수의 합을 계산하는 함수 solution / 정수 n을 입력받고 그 약수들의 합을 정수로 반환
    int answer = 0;       -> 약수의 합을 저장할 변수 answer, 0으로 초기화 / 이 변수에 약수를 계속 더해감
    int i = 1;            -> 반복문에서 사용할 변수 i, 1로 초기화 / i는 n의 약수인지 검사할 숫자를 나타냄
    while (i<=n) {        -> i가 n보다 작거나 같은 동안 반복을 수행 / 반복의 목적은 1부터 n까지의 숫자를 하나씩 검사
        if (n%i==0) {     -> n을 i로 나눈 나머지를 계산 / 나머지가 0이면 i는 n의 약수
            answer +=i;   -> i가 약수라면 현재 i의 값을 answer에 더함 / answer += i는 answer = answer + i와 동일한 의미
        }
        i++;              -> 다음 숫자를 검사하기 위해 i를 1 증가시킴/ 반복문이 한 번 실행될 때마다 숫자가 하나씩 커짐
    }
    return answer;        -> 모든 숫자를 검사한 후 answer에 저장되니 누적된 값 answer를 반환
}

int solution(int n) -> 임의로 정한 함수 solution / 뒤쪽 중괄호가 함수 solution에 대한 정의를 나타냄 / (int n)은 매개변수
int answer = 0 -> answer는 함수가 아니고 변수기 때문에 따로 정의 없이 선언만 하면 됨 / 0으로 초기화 하지 않으면 디버깅이 어려움
int i = 1 -> 반복문을 위한 제어변수 / 초기값으로 1 설정하여 반복문이 처음 시작할때 1부터 시작
while (i<=n) -> (i<=n)이라는 조건이 참일 때 뒤의 중괄호를 반복
if (n%i==0) -> % : 나머지를 구하는 연산자 / == : 비교연산자로 두 값을 비교하여 같은지 다른지 확인
answer +=i -> += : 누적 대입 연산자로 answer에 i를 더한 후 그 값을 다시 answer에 할당하는 축약형 / answer = answer + i와 같은 의미
i++ -> ++ : 후위 증가 연산자로 값을 반환한 후 i의 값을 1 증가시킴 / i = i + 1, i += 1과 같은 의미 
return answer -> 함수의 최종 결과값을 반환

while / for 의 차이 
while
while (조건식) {
조건이 참일 동안 실행되는 코드
} -> 조건이 거짓이 될 때까지 반복
for
for (초기화; 조건식; 증가) {
반복할 코드
} -> 초기화, 조건, 증가/변경을 한번에 관리할 수 있어 코드가 간결해짐 / 반복 횟수가 정해져 있을 때 유용


-- 자릿수 더하기 -- 

문제 설명
자연수 N이 주어지면, N의 각 자릿수의 합을 구해서 return 하는 solution 함수를 만들어 주세요.
예를들어 N = 123이면 1 + 2 + 3 = 6을 return 하면 됩니다.

제한사항
N의 범위 : 100,000,000 이하의 자연수
입출력 예
N	answer
123	6
987	24
입출력 예 설명
입출력 예 #1
문제의 예시와 같습니다.

입출력 예 #2
9 + 8 + 7 = 24이므로 24를 return 하면 됩니다.

- 풀이 -

int solution(int n) {
    int answer = 0;
    int i =0;
    while (pow(10, i)<=n){                     -> 10^i가 n보다 작거나 같을 때까지 반복
        int a = n /(int) pow(10, i) %10;{     -> n에서 i번째 자릿수 추출
            answer+=a;                        -> 자릿수 더함
        }
        i++;                                  -> i를 증가시켜 다음 자릿수로
    }
    return answer;                            -> 최종 합을 반환
}

int i = 0 -> n/10^i을 할 때 i가 0이여야 n값 그대로가 되고 %10을 할때 일의 자리의 값이 추출됨
while (pow(10, i)<=n) -> pow(a, b) : a의 b승을 계산하는 함수(a^b) / 10^i는 비트 연산자로 다른 값이 출력됨
int a = n /(int) pow(10, i) %10 -> (int) : pow(10, i)의 결과를 정수형으로 변환하는 역할 / 형변환 연산자는 반드시 괄호로 감싸야함 / pow(10, i) 자체가 실수형이기 때문에 pow(10, 2)는 100.0을 반환함


-- 짝수와 홀수 --

문제 설명
정수 num이 짝수일 경우 "Even"을 반환하고 홀수인 경우 "Odd"를 반환하는 함수, solution을 완성해주세요.

제한 조건
num은 int 범위의 정수입니다.
0은 짝수입니다.
입출력 예
num	return
3	"Odd"
4	"Even"

- 풀이 -

char* solution(int num) {                               -> num이라는 정수를 입력받아 문자열(char)을 반환
    // 리턴할 값은 메모리를 동적 할당해주세요               
    char* answer = (char*)malloc(5 * sizeof(char));     -> "Even"이나 "Odd"는 최대 4글자 + 널문자('\0') 필요
    if (num % 2 == 0) {                                 -> 2로 나눴을 때 나머지가 0 / 짝수
        strcpy (answer, "Even");                       
    }
        else {                                          -> 2로 나눴을 때 나머지가 0이 아닌 경우 / 홀수
            strcpy (answer, "Odd");
        }
    return answer;                                      -> 동적으로 할당된 메모리 반환
}

char* solution(int num) -> solution이라는 임의의 함수가 정수 num을 입력받아 결과를 문자열(char) 형태로 반
char* answer = (char*)malloc(5 * sizeof(char)) -> malloc : 주어진 크기만큼 연속된 메모리 공간을 할당/ 초기화되지 않은 값
strcpy (answer, "Even") -> strcpy : 문자열을 복사 / "Even"을 answer가 가리키는 메모리 공간에 복사
strcpy (answer, "Odd") -> "Odd"를 answer가 가리키는 메모리 공간에 복

char : 단일 문자를 저장
char* : 문자열 또는 문자 배열의 시작 주소를 가리킴 / 문자열 처리 시에는 보통 char*을 사용
malloc : 주어진 크기만큼 연속된 메모리 공간을 할당 / 초기화 되지 않은 값 / int* arr = (int*)malloc(10 * sizeof(int));
calloc : malloc과 비슷하지만 할당된 메모리를 0으로 초기화 / int* arr = (int*)calloc(10, sizeof(int));
realloc : 기존에 할당된 메모리 크기를 변경 / arr = (int*)realloc(arr, 20 * sizeof(int));
free : 동적으로 할당된 메모리를 해제 / free(arr);
삼항 연산자 ? : -> 조건 ? 참일 때 실행할 코드 : 거짓일 때 실행할 코드;


-- 평균 구하기 --

문제 설명
정수를 담고 있는 배열 arr의 평균값을 return하는 함수, solution을 완성해보세요.

제한사항
arr은 길이 1 이상, 100 이하인 배열입니다.
arr의 원소는 -10,000 이상 10,000 이하인 정수입니다.
입출력 예
arr	return
[1,2,3,4]	2.5
[5,5]	5

- 풀이 -









